import chalk from 'chalk';
import * as fs from 'fs-extra';
import ignore from 'ignore';
import * as os from 'os';
import * as path from 'path';
import * as prettier from 'prettier';

export interface IndexIgnoreOptions {
  exclude: string[];
}

const commont = `/* Generated by cli, don't modify manually */`;
const space = `${os.EOL}${os.EOL}`;

type IndexGeneratorOptions = {
  force: boolean;
  js: boolean;
  ignore: string;
  perttierConfig: string;
};

type ConvertOptions = {
  dirUrl: string;
  dirName: string;
  ext: string;
  template: string;
  absoluteFilePath: string;
};

export class PrettierGenerator {
  url: string;
  isforce: boolean;
  isModule: boolean;
  isJs: boolean;
  ignore: IndexIgnoreOptions;
  perttierConfig: any;

  ig = ignore();

  constructor(target: string, options: IndexGeneratorOptions) {
    this.url = target;
    this.isforce = options.force;
    this.isJs = options.js;
    this.perttierConfig = require(options.perttierConfig);

    if (fs.existsSync(options.ignore)) {
      this.ignore = require(options.ignore);

      this.ig.add(this.ignore.exclude);
    }
  }

  createFile(dirUrl?: string) {
    if (!dirUrl) {
      dirUrl = this.url;
    }
    const filePaths = fs.readdirSync(dirUrl);

    const dirName = path.basename(dirUrl);

    filePaths.forEach(filePath => {
      const absoluteFilePath = path.join(dirUrl, filePath);
      const status = fs.statSync(absoluteFilePath);

      if (this.checkPathVariable(absoluteFilePath)) {
        return 0;
      }

      const isDir = status.isDirectory();

      if (isDir) {
        this.createFile(absoluteFilePath);
      } else {
        const content = fs.readFileSync(absoluteFilePath).toString();

        if (
          new RegExp(`\.ts$|\.js$|\.tsx$|\.jsx$`, 'gi').test(absoluteFilePath)
        ) {
          const result = prettier.format(content, {
            parser: 'babel',
            ...this.perttierConfig
          });
          fs.writeFileSync(absoluteFilePath, result);
          console.log(`${chalk.green('prettier format with: ')} ${absoluteFilePath}`);
        }
      }
    });
  }

  private checkPathVariable(fileUrl: string) {
    let checkUrl = fileUrl;
    if (checkUrl[0] === '/') {
      checkUrl = checkUrl.substring(1);
    }

    return (
      this.ignore &&
      (this.ignore.exclude && this.ig.ignores(path.join(checkUrl)))
    );
  }
}
